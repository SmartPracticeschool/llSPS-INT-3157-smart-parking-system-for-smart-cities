import time
import sys
import ibmiotf.application
import ibmiotf.device    #pip install ibmiotf
import random


#Provide your IBM Watson Device Credentials
organization = "*****"
deviceType = "******"
deviceId = "******"
authMethod = "token"
authToken = "*****"

#initialize GPIO

def myCommandCallback(cmd):
        print("Command received: %s" % cmd.data)#Commands received from nodered
        print(type(cmd.data))
        i=cmd.data['command']
        if i == 'enter':
                print("Entered")
        elif i == 'exit':
                print("exited")

                
try:
	deviceOptions = {"org": organization, "type": deviceType, "id": deviceId, "auth-method": authMethod, "auth-token": authToken}
        #JSON format
	deviceCli = ibmiotf.device.Client(deviceOptions)
	#connecting the client
	
except Exception as e:
	print("Caught exception connecting device: %s" % str(e))
	sys.exit()



deviceCli.connect()
# connecting to the platform

while True:
        
        enter=random.randint(1, 40)
        exits=random.randint(1, 40)
        available=random.randint(1, 40)
        #Send entry and exit status to IBM Watson
        data = { 'Entry' : enter, 'Exit': exits, 'Available_slots': available}
        #print (data)
        def myOnPublishCallback():
            print ("Publish Entries = %s " % enter, "Exits = %s " % exits, "Available slots = %s  " %available, "to IBM Watson")

        #publish the data
        success = deviceCli.publishEvent("Smart Parking", "json", data, qos=0, on_publish=myOnPublishCallback)
        if not success:
            print("Not connected to IoTF")
        time.sleep(2)
        
        deviceCli.commandCallback = myCommandCallback
        #subscribing
        
# Disconnect the device and application from the cloud
deviceCli.disconnect()
